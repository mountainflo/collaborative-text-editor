// source: collabTexteditorService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.collabTexteditorService.Empty', null, global);
goog.exportSymbol('proto.collabTexteditorService.LocalUpdateReply', null, global);
goog.exportSymbol('proto.collabTexteditorService.LocalUpdateRequest', null, global);
goog.exportSymbol('proto.collabTexteditorService.RemoteUpdateRequest', null, global);
goog.exportSymbol('proto.collabTexteditorService.RemoteUpdateResponse', null, global);
goog.exportSymbol('proto.collabTexteditorService.ReplicaResponse', null, global);
goog.exportSymbol('proto.collabTexteditorService.TiTreeNode', null, global);
goog.exportSymbol('proto.collabTexteditorService.TiTreeNode.Timestamp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collabTexteditorService.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collabTexteditorService.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collabTexteditorService.Empty.displayName = 'proto.collabTexteditorService.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collabTexteditorService.ReplicaResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collabTexteditorService.ReplicaResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collabTexteditorService.ReplicaResponse.displayName = 'proto.collabTexteditorService.ReplicaResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collabTexteditorService.LocalUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collabTexteditorService.LocalUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collabTexteditorService.LocalUpdateRequest.displayName = 'proto.collabTexteditorService.LocalUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collabTexteditorService.LocalUpdateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collabTexteditorService.LocalUpdateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collabTexteditorService.LocalUpdateReply.displayName = 'proto.collabTexteditorService.LocalUpdateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collabTexteditorService.RemoteUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collabTexteditorService.RemoteUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collabTexteditorService.RemoteUpdateRequest.displayName = 'proto.collabTexteditorService.RemoteUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collabTexteditorService.RemoteUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collabTexteditorService.RemoteUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collabTexteditorService.RemoteUpdateResponse.displayName = 'proto.collabTexteditorService.RemoteUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collabTexteditorService.TiTreeNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.collabTexteditorService.TiTreeNode.repeatedFields_, null);
};
goog.inherits(proto.collabTexteditorService.TiTreeNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collabTexteditorService.TiTreeNode.displayName = 'proto.collabTexteditorService.TiTreeNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collabTexteditorService.TiTreeNode.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collabTexteditorService.TiTreeNode.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collabTexteditorService.TiTreeNode.Timestamp.displayName = 'proto.collabTexteditorService.TiTreeNode.Timestamp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.collabTexteditorService.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.collabTexteditorService.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.collabTexteditorService.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collabTexteditorService.Empty}
 */
proto.collabTexteditorService.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collabTexteditorService.Empty;
  return proto.collabTexteditorService.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collabTexteditorService.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collabTexteditorService.Empty}
 */
proto.collabTexteditorService.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collabTexteditorService.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collabTexteditorService.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collabTexteditorService.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.collabTexteditorService.ReplicaResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.collabTexteditorService.ReplicaResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.collabTexteditorService.ReplicaResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.ReplicaResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicaid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collabTexteditorService.ReplicaResponse}
 */
proto.collabTexteditorService.ReplicaResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collabTexteditorService.ReplicaResponse;
  return proto.collabTexteditorService.ReplicaResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collabTexteditorService.ReplicaResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collabTexteditorService.ReplicaResponse}
 */
proto.collabTexteditorService.ReplicaResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplicaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collabTexteditorService.ReplicaResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collabTexteditorService.ReplicaResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collabTexteditorService.ReplicaResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.ReplicaResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicaid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 replicaId = 1;
 * @return {number}
 */
proto.collabTexteditorService.ReplicaResponse.prototype.getReplicaid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.collabTexteditorService.ReplicaResponse} returns this
 */
proto.collabTexteditorService.ReplicaResponse.prototype.setReplicaid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.collabTexteditorService.LocalUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.collabTexteditorService.LocalUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.collabTexteditorService.LocalUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.LocalUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.collabTexteditorService.TiTreeNode.toObject(includeInstance, f),
    replicaid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collabTexteditorService.LocalUpdateRequest}
 */
proto.collabTexteditorService.LocalUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collabTexteditorService.LocalUpdateRequest;
  return proto.collabTexteditorService.LocalUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collabTexteditorService.LocalUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collabTexteditorService.LocalUpdateRequest}
 */
proto.collabTexteditorService.LocalUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.collabTexteditorService.TiTreeNode;
      reader.readMessage(value,proto.collabTexteditorService.TiTreeNode.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplicaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collabTexteditorService.LocalUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collabTexteditorService.LocalUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collabTexteditorService.LocalUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.LocalUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.collabTexteditorService.TiTreeNode.serializeBinaryToWriter
    );
  }
  f = message.getReplicaid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional TiTreeNode node = 1;
 * @return {?proto.collabTexteditorService.TiTreeNode}
 */
proto.collabTexteditorService.LocalUpdateRequest.prototype.getNode = function() {
  return /** @type{?proto.collabTexteditorService.TiTreeNode} */ (
    jspb.Message.getWrapperField(this, proto.collabTexteditorService.TiTreeNode, 1));
};


/**
 * @param {?proto.collabTexteditorService.TiTreeNode|undefined} value
 * @return {!proto.collabTexteditorService.LocalUpdateRequest} returns this
*/
proto.collabTexteditorService.LocalUpdateRequest.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.collabTexteditorService.LocalUpdateRequest} returns this
 */
proto.collabTexteditorService.LocalUpdateRequest.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.collabTexteditorService.LocalUpdateRequest.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 replicaId = 2;
 * @return {number}
 */
proto.collabTexteditorService.LocalUpdateRequest.prototype.getReplicaid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.collabTexteditorService.LocalUpdateRequest} returns this
 */
proto.collabTexteditorService.LocalUpdateRequest.prototype.setReplicaid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.collabTexteditorService.LocalUpdateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.collabTexteditorService.LocalUpdateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.collabTexteditorService.LocalUpdateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.LocalUpdateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusmessage: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collabTexteditorService.LocalUpdateReply}
 */
proto.collabTexteditorService.LocalUpdateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collabTexteditorService.LocalUpdateReply;
  return proto.collabTexteditorService.LocalUpdateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collabTexteditorService.LocalUpdateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collabTexteditorService.LocalUpdateReply}
 */
proto.collabTexteditorService.LocalUpdateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collabTexteditorService.LocalUpdateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collabTexteditorService.LocalUpdateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collabTexteditorService.LocalUpdateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.LocalUpdateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusmessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string statusMessage = 1;
 * @return {string}
 */
proto.collabTexteditorService.LocalUpdateReply.prototype.getStatusmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.collabTexteditorService.LocalUpdateReply} returns this
 */
proto.collabTexteditorService.LocalUpdateReply.prototype.setStatusmessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.collabTexteditorService.RemoteUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.collabTexteditorService.RemoteUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.collabTexteditorService.RemoteUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.RemoteUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicaid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collabTexteditorService.RemoteUpdateRequest}
 */
proto.collabTexteditorService.RemoteUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collabTexteditorService.RemoteUpdateRequest;
  return proto.collabTexteditorService.RemoteUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collabTexteditorService.RemoteUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collabTexteditorService.RemoteUpdateRequest}
 */
proto.collabTexteditorService.RemoteUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplicaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collabTexteditorService.RemoteUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collabTexteditorService.RemoteUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collabTexteditorService.RemoteUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.RemoteUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicaid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 replicaId = 1;
 * @return {number}
 */
proto.collabTexteditorService.RemoteUpdateRequest.prototype.getReplicaid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.collabTexteditorService.RemoteUpdateRequest} returns this
 */
proto.collabTexteditorService.RemoteUpdateRequest.prototype.setReplicaid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.collabTexteditorService.RemoteUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.collabTexteditorService.RemoteUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.collabTexteditorService.RemoteUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.RemoteUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderreplicaid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    node: (f = msg.getNode()) && proto.collabTexteditorService.TiTreeNode.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collabTexteditorService.RemoteUpdateResponse}
 */
proto.collabTexteditorService.RemoteUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collabTexteditorService.RemoteUpdateResponse;
  return proto.collabTexteditorService.RemoteUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collabTexteditorService.RemoteUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collabTexteditorService.RemoteUpdateResponse}
 */
proto.collabTexteditorService.RemoteUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderreplicaid(value);
      break;
    case 2:
      var value = new proto.collabTexteditorService.TiTreeNode;
      reader.readMessage(value,proto.collabTexteditorService.TiTreeNode.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collabTexteditorService.RemoteUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collabTexteditorService.RemoteUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collabTexteditorService.RemoteUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.RemoteUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderreplicaid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.collabTexteditorService.TiTreeNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 senderReplicaId = 1;
 * @return {number}
 */
proto.collabTexteditorService.RemoteUpdateResponse.prototype.getSenderreplicaid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.collabTexteditorService.RemoteUpdateResponse} returns this
 */
proto.collabTexteditorService.RemoteUpdateResponse.prototype.setSenderreplicaid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TiTreeNode node = 2;
 * @return {?proto.collabTexteditorService.TiTreeNode}
 */
proto.collabTexteditorService.RemoteUpdateResponse.prototype.getNode = function() {
  return /** @type{?proto.collabTexteditorService.TiTreeNode} */ (
    jspb.Message.getWrapperField(this, proto.collabTexteditorService.TiTreeNode, 2));
};


/**
 * @param {?proto.collabTexteditorService.TiTreeNode|undefined} value
 * @return {!proto.collabTexteditorService.RemoteUpdateResponse} returns this
*/
proto.collabTexteditorService.RemoteUpdateResponse.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.collabTexteditorService.RemoteUpdateResponse} returns this
 */
proto.collabTexteditorService.RemoteUpdateResponse.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.collabTexteditorService.RemoteUpdateResponse.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.collabTexteditorService.TiTreeNode.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.collabTexteditorService.TiTreeNode.prototype.toObject = function(opt_includeInstance) {
  return proto.collabTexteditorService.TiTreeNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.collabTexteditorService.TiTreeNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.TiTreeNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && proto.collabTexteditorService.TiTreeNode.Timestamp.toObject(includeInstance, f),
    parenttimestamp: (f = msg.getParenttimestamp()) && proto.collabTexteditorService.TiTreeNode.Timestamp.toObject(includeInstance, f),
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tombstone: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    childrentimestampsList: jspb.Message.toObjectList(msg.getChildrentimestampsList(),
    proto.collabTexteditorService.TiTreeNode.Timestamp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collabTexteditorService.TiTreeNode}
 */
proto.collabTexteditorService.TiTreeNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collabTexteditorService.TiTreeNode;
  return proto.collabTexteditorService.TiTreeNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collabTexteditorService.TiTreeNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collabTexteditorService.TiTreeNode}
 */
proto.collabTexteditorService.TiTreeNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.collabTexteditorService.TiTreeNode.Timestamp;
      reader.readMessage(value,proto.collabTexteditorService.TiTreeNode.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.collabTexteditorService.TiTreeNode.Timestamp;
      reader.readMessage(value,proto.collabTexteditorService.TiTreeNode.Timestamp.deserializeBinaryFromReader);
      msg.setParenttimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTombstone(value);
      break;
    case 5:
      var value = new proto.collabTexteditorService.TiTreeNode.Timestamp;
      reader.readMessage(value,proto.collabTexteditorService.TiTreeNode.Timestamp.deserializeBinaryFromReader);
      msg.addChildrentimestamps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collabTexteditorService.TiTreeNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collabTexteditorService.TiTreeNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collabTexteditorService.TiTreeNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.TiTreeNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.collabTexteditorService.TiTreeNode.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getParenttimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.collabTexteditorService.TiTreeNode.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTombstone();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getChildrentimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.collabTexteditorService.TiTreeNode.Timestamp.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.collabTexteditorService.TiTreeNode.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.collabTexteditorService.TiTreeNode.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.collabTexteditorService.TiTreeNode.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.TiTreeNode.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicaid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collabTexteditorService.TiTreeNode.Timestamp}
 */
proto.collabTexteditorService.TiTreeNode.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collabTexteditorService.TiTreeNode.Timestamp;
  return proto.collabTexteditorService.TiTreeNode.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collabTexteditorService.TiTreeNode.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collabTexteditorService.TiTreeNode.Timestamp}
 */
proto.collabTexteditorService.TiTreeNode.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplicaid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collabTexteditorService.TiTreeNode.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collabTexteditorService.TiTreeNode.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collabTexteditorService.TiTreeNode.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collabTexteditorService.TiTreeNode.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicaid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 replicaId = 1;
 * @return {number}
 */
proto.collabTexteditorService.TiTreeNode.Timestamp.prototype.getReplicaid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.collabTexteditorService.TiTreeNode.Timestamp} returns this
 */
proto.collabTexteditorService.TiTreeNode.Timestamp.prototype.setReplicaid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.collabTexteditorService.TiTreeNode.Timestamp.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.collabTexteditorService.TiTreeNode.Timestamp} returns this
 */
proto.collabTexteditorService.TiTreeNode.Timestamp.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Timestamp timestamp = 1;
 * @return {?proto.collabTexteditorService.TiTreeNode.Timestamp}
 */
proto.collabTexteditorService.TiTreeNode.prototype.getTimestamp = function() {
  return /** @type{?proto.collabTexteditorService.TiTreeNode.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.collabTexteditorService.TiTreeNode.Timestamp, 1));
};


/**
 * @param {?proto.collabTexteditorService.TiTreeNode.Timestamp|undefined} value
 * @return {!proto.collabTexteditorService.TiTreeNode} returns this
*/
proto.collabTexteditorService.TiTreeNode.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.collabTexteditorService.TiTreeNode} returns this
 */
proto.collabTexteditorService.TiTreeNode.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.collabTexteditorService.TiTreeNode.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Timestamp parentTimestamp = 2;
 * @return {?proto.collabTexteditorService.TiTreeNode.Timestamp}
 */
proto.collabTexteditorService.TiTreeNode.prototype.getParenttimestamp = function() {
  return /** @type{?proto.collabTexteditorService.TiTreeNode.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.collabTexteditorService.TiTreeNode.Timestamp, 2));
};


/**
 * @param {?proto.collabTexteditorService.TiTreeNode.Timestamp|undefined} value
 * @return {!proto.collabTexteditorService.TiTreeNode} returns this
*/
proto.collabTexteditorService.TiTreeNode.prototype.setParenttimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.collabTexteditorService.TiTreeNode} returns this
 */
proto.collabTexteditorService.TiTreeNode.prototype.clearParenttimestamp = function() {
  return this.setParenttimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.collabTexteditorService.TiTreeNode.prototype.hasParenttimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.collabTexteditorService.TiTreeNode.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.collabTexteditorService.TiTreeNode} returns this
 */
proto.collabTexteditorService.TiTreeNode.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool tombstone = 4;
 * @return {boolean}
 */
proto.collabTexteditorService.TiTreeNode.prototype.getTombstone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.collabTexteditorService.TiTreeNode} returns this
 */
proto.collabTexteditorService.TiTreeNode.prototype.setTombstone = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated Timestamp childrenTimestamps = 5;
 * @return {!Array<!proto.collabTexteditorService.TiTreeNode.Timestamp>}
 */
proto.collabTexteditorService.TiTreeNode.prototype.getChildrentimestampsList = function() {
  return /** @type{!Array<!proto.collabTexteditorService.TiTreeNode.Timestamp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.collabTexteditorService.TiTreeNode.Timestamp, 5));
};


/**
 * @param {!Array<!proto.collabTexteditorService.TiTreeNode.Timestamp>} value
 * @return {!proto.collabTexteditorService.TiTreeNode} returns this
*/
proto.collabTexteditorService.TiTreeNode.prototype.setChildrentimestampsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.collabTexteditorService.TiTreeNode.Timestamp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.collabTexteditorService.TiTreeNode.Timestamp}
 */
proto.collabTexteditorService.TiTreeNode.prototype.addChildrentimestamps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.collabTexteditorService.TiTreeNode.Timestamp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.collabTexteditorService.TiTreeNode} returns this
 */
proto.collabTexteditorService.TiTreeNode.prototype.clearChildrentimestampsList = function() {
  return this.setChildrentimestampsList([]);
};


goog.object.extend(exports, proto.collabTexteditorService);
